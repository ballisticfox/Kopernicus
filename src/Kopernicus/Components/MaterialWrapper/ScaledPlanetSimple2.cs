// Material wrapper generated by shader translator tool

using System;
using System.Diagnostics.CodeAnalysis;
using UnityEngine;

namespace Kopernicus.Components.MaterialWrapper
{
    [SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
    [SuppressMessage("ReSharper", "AutoPropertyCanBeMadeGetOnly.Local")]
    [SuppressMessage("ReSharper", "MemberCanBeProtected.Global")]
    public class ScaledPlanetSimple2 : Material
    {
        // Internal property ID tracking object
        protected class Properties
        {
            // Return the shader for this wrapper
            private const String SHADER_NAME = "Terrain/ScaledMesh2";


            //This is going to spam the log but I don't know how else to do it
            public static Shader Shader
            {
                get 
                {
                    return ShaderLoader.GetShader(SHADER_NAME);
                }
            }

            // Color Tint, default = (1,1,1,1)
            public const String COLOR_KEY = "_Color";
            public Int32 ColorId { get; private set; }


            ///
            // Cubemap mainTex, default is "white"
            public const String MAIN_TEX_Xn_KEY = "_MainTex_Xn";
            public Int32 MainTex_XnId { get; private set; }

            public const String MAIN_TEX_Xp_KEY = "_MainTex_Xp";
            public Int32 MainTex_XpId { get; private set; }

            public const String MAIN_TEX_Yn_KEY = "_MainTex_Yn";
            public Int32 MainTex_YnId { get; private set; }

            public const String MAIN_TEX_Yp_KEY = "_MainTex_Yp";
            public Int32 MainTex_YpId { get; private set; }

            public const String MAIN_TEX_Zn_KEY = "_MainTex_Zn";
            public Int32 MainTex_ZnId { get; private set; }

            public const String MAIN_TEX_Zp_KEY = "_MainTex_Zp";
            public Int32 MainTex_ZpId { get; private set; }
            ///

            // Cubemap Normal map, default = "bump" { }
            public const String BUMP_MAP_Xn_KEY = "_BumpMap_Xn";
            public Int32 BumpMap_XnId { get; private set; }

            public const String BUMP_MAP_Xp_KEY = "_BumpMap_Xp";
            public Int32 BumpMap_XpId { get; private set; }

            public const String BUMP_MAP_Yn_KEY = "_BumpMap_Yn";
            public Int32 BumpMap_YnId { get; private set; }

            public const String BUMP_MAP_Yp_KEY = "_BumpMap_Yp";
            public Int32 BumpMap_YpId { get; private set; }

            public const String BUMP_MAP_Zn_KEY = "_BumpMap_Zn";
            public Int32 BumpMap_ZnId { get; private set; }

            public const String BUMP_MAP_Zp_KEY = "_BumpMap_Zp";
            public Int32 BumpMap_ZpId { get; private set; }


            //Bump Map Intensity
            public const String BUMP_SCALE_KEY = "_BumpScale";
            public Int32 BumpScaleID { get; private set; }


            // Specular Color, default = (0.5,0.5,0.5,1)
            public const String SPEC_COLOR_KEY = "_SpecColor";
            public Int32 SpecColorId { get; private set; }

            // Shininess, default = 1
            public const String SHININESS_KEY = "_Shininess";
            public Int32 ShininessId { get; private set; }

            //Ocean Radius, radius of the celestial body * Worldscale

            //Planet Origin
            //Depth Pull
            //SunPos
            //SunRadius



            // Singleton instance
            private static Properties _singleton;

            public static Properties Instance
            {
                get
                {
                    // Construct the singleton if it does not exist
                    return _singleton ?? (_singleton = new Properties());
                }
            }

            private Properties()
            {
                ColorId = Shader.PropertyToID(COLOR_KEY);
                MainTex_XnId = Shader.PropertyToID(MAIN_TEX_Xn_KEY);
                MainTex_XpId = Shader.PropertyToID(MAIN_TEX_Xp_KEY);
                MainTex_YnId = Shader.PropertyToID(MAIN_TEX_Yn_KEY);
                MainTex_YpId = Shader.PropertyToID(MAIN_TEX_Yp_KEY);
                MainTex_ZnId = Shader.PropertyToID(MAIN_TEX_Zn_KEY);
                MainTex_ZpId = Shader.PropertyToID(MAIN_TEX_Zp_KEY);

                BumpMap_XnId = Shader.PropertyToID(BUMP_MAP_Xn_KEY);
                BumpMap_XpId = Shader.PropertyToID(BUMP_MAP_Xp_KEY);
                BumpMap_YnId = Shader.PropertyToID(BUMP_MAP_Yn_KEY);
                BumpMap_YpId = Shader.PropertyToID(BUMP_MAP_Yp_KEY);
                BumpMap_ZnId = Shader.PropertyToID(BUMP_MAP_Zn_KEY);
                BumpMap_ZpId = Shader.PropertyToID(BUMP_MAP_Zp_KEY);

                BumpScaleID = Shader.PropertyToID(BUMP_SCALE_KEY);


                SpecColorId = Shader.PropertyToID(SPEC_COLOR_KEY);
                ShininessId = Shader.PropertyToID(SHININESS_KEY);
            }
        }

        // Is some random material this material 
        public static Boolean UsesSameShader(Material m)
        {
            if (m == null)
            {
                return false;
            }
            bool usesSameShader = m.shader.name == Properties.Shader.name;
            return m.shader.name == Properties.Shader.name;
        }

        // Main Color, default = (1,1,1,1)
        public Color Color
        {
            get { return GetColor(Properties.Instance.ColorId); }
            set { SetColor(Properties.Instance.ColorId, value); }
        }

        // Specular Color, default = (0,0,0,1)
        public Color SpecColor
        {
            get { return GetColor(Properties.Instance.SpecColorId); }
            set { SetColor(Properties.Instance.SpecColorId, value); }
        }

        // Shininess, default = 0
        public Single Shininess
        {
            get { return GetFloat(Properties.Instance.ShininessId); }
            set { SetFloat(Properties.Instance.ShininessId, Mathf.Clamp(value, 0f, 10000f)); }
        }
        public Single BumpScale
        {
            get { return GetFloat(Properties.Instance.BumpScaleID); }
            set { SetFloat(Properties.Instance.BumpScaleID, value); }
        }

        // Base (RGB) Gloss (A), default = "white" { }
        public Texture2D MainTex_Xn
        {
            get { return GetTexture(Properties.Instance.MainTex_XnId) as Texture2D; }
            set { SetTexture(Properties.Instance.MainTex_XnId, value); }
        }
        public Texture2D MainTex_Xp
        {
            get { return GetTexture(Properties.Instance.MainTex_XpId) as Texture2D; }
            set { SetTexture(Properties.Instance.MainTex_XpId, value); }
        }

        public Texture2D MainTex_Yn
        {
            get { return GetTexture(Properties.Instance.MainTex_YnId) as Texture2D; }
            set { SetTexture(Properties.Instance.MainTex_YnId, value); }
        }
        public Texture2D MainTex_Yp
        {
            get { return GetTexture(Properties.Instance.MainTex_YpId) as Texture2D; }
            set { SetTexture(Properties.Instance.MainTex_YpId, value); }
        }

        public Texture2D MainTex_Zn
        {
            get { return GetTexture(Properties.Instance.MainTex_ZnId) as Texture2D; }
            set { SetTexture(Properties.Instance.MainTex_ZnId, value); }
        }
        public Texture2D MainTex_Zp
        {
            get { return GetTexture(Properties.Instance.MainTex_ZpId) as Texture2D; }
            set { SetTexture(Properties.Instance.MainTex_ZpId, value); }
        }

        //Try without these first
        //public Vector2 MainTexScale
        //{
        //    get { return GetTextureScale(Properties.Instance.MainTexId); }
        //    set { SetTextureScale(Properties.Instance.MainTexId, value); }
        //}

        //public Vector2 MainTexOffset
        //{
        //    get { return GetTextureOffset(Properties.Instance.MainTexId); }
        //    set { SetTextureOffset(Properties.Instance.MainTexId, value); }
        //}

        // Normal map, default = "bump" { }
        public Texture2D BumpMap_Xn
        {
            get { return GetTexture(Properties.Instance.BumpMap_XnId) as Texture2D; }
            set { SetTexture(Properties.Instance.BumpMap_XnId, value); }
        }
        public Texture2D BumpMap_Xp
        {
            get { return GetTexture(Properties.Instance.BumpMap_XpId) as Texture2D; }
            set { SetTexture(Properties.Instance.BumpMap_XpId, value); }
        }

        public Texture2D BumpMap_Yn
        {
            get { return GetTexture(Properties.Instance.BumpMap_YnId) as Texture2D; }
            set { SetTexture(Properties.Instance.BumpMap_YnId, value); }
        }
        public Texture2D BumpMap_Yp
        {
            get { return GetTexture(Properties.Instance.BumpMap_YpId) as Texture2D; }
            set { SetTexture(Properties.Instance.BumpMap_YpId, value); }
        }

        public Texture2D BumpMap_Zn
        {
            get { return GetTexture(Properties.Instance.BumpMap_ZnId) as Texture2D; }
            set { SetTexture(Properties.Instance.BumpMap_ZnId, value); }
        }
        public Texture2D BumpMap_Zp
        {
            get { return GetTexture(Properties.Instance.BumpMap_ZpId) as Texture2D; }
            set { SetTexture(Properties.Instance.BumpMap_ZpId, value); }
        }


        //public Vector2 BumpMapScale
        //{
        //    get { return GetTextureScale(Properties.Instance.BumpMapId); }
        //    set { SetTextureScale(Properties.Instance.BumpMapId, value); }
        //}

        //public Vector2 BumpMapOffset
        //{
        //    get { return GetTextureOffset(Properties.Instance.BumpMapId); }
        //    set { SetTextureOffset(Properties.Instance.BumpMapId, value); }
        //}
        public ScaledPlanetSimple2() : base(Properties.Shader)
        {
        }

        [Obsolete("Creating materials from shader source String is no longer supported. Use Shader assets instead.")]
        public ScaledPlanetSimple2(String contents) : base(contents)
        {
            shader = Properties.Shader;
        }

        public ScaledPlanetSimple2(Material material) : base(material)
        {
            // Throw exception if this material was not the proper material
            if (material.shader.name != Properties.Shader.name)
            {
                throw new InvalidOperationException("Type Mismatch: Terrain/ScaledMesh2 shader required");
            }
        }

    }
}
